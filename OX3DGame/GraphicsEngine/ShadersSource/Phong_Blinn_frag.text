#version 150

smooth in vec3 Normal;
smooth in vec3 Position;

uniform vec3 lightPositions[5];
uniform vec3 objectColor;
uniform vec3 lightColorsDiff[5];
uniform vec3 lightColorsSpec[5];
uniform float shininess;
uniform float ambientStrength;
uniform vec3 spotLightPosition;
uniform vec3 spotLightColorDiff;
uniform vec3 spotLightColorSpec;
uniform vec3 spotLightVector;
uniform float spotLightFocus;

out vec3 Color;

void main() {

	Color = objectColor * ambientStrength;
	vec3 vNormal = normalize(Normal);

	if(ambientStrength == 1)
	return;

	int i;
	for (i=0;i<5;i=i+1)
	{
		vec3 vLength = lightPositions[i] - Position;
		float Length = length(vLength);
		float LengthForce = min(max(1 - Length * Length / 200, 0), 1);

		vec3 vLightDir = normalize(vLength);

		float Diff = max(0.0f, dot(vNormal, vLightDir));

		vec3 vHSum = vLightDir + vNormal;
		vec3 vH = vHSum/length(vHSum);
		float Spec = pow(max(0.0f, dot(vNormal, vH)), shininess);

		Color = Color + objectColor * lightColorsDiff[i] * Diff * LengthForce;
		Color = Color + objectColor * lightColorsSpec[i] * Spec * LengthForce;
	}

	vec3 vLightDirSpot = normalize(spotLightPosition - Position);
	float SpotStrength = pow(max(0.0f, dot(spotLightVector, vLightDirSpot)), spotLightFocus);

	float DiffSpot = max(0.0f, dot(vNormal, vLightDirSpot));

	vec3 vHSumSpot = vLightDirSpot + vNormal;
	vec3 vHSpot = vHSumSpot/length(vHSumSpot);
	float SpecSpot = pow(max(0.0f, dot(vNormal, vHSpot)), shininess);

	Color = Color + objectColor * spotLightColorDiff * DiffSpot * SpotStrength;
	Color = Color + objectColor * spotLightColorSpec * SpecSpot * SpotStrength;

	Color.rgb = vec3(min(1,Color.r), min(1,Color.g), min(1,Color.b));

}